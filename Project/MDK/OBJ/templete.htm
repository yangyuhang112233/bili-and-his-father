<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\OBJ\templete.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\OBJ\templete.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Jul 24 00:39:03 2017
<BR><P>
<H3>Maximum Stack Usage =        268 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; bamaswitch &rArr; Printf &rArr; LCD_printf &rArr; LCD_DispChar &rArr; _LCD_DispChar &rArr; LCD_Draw_Point &rArr; SPI_ReadWriteByte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[28]">CAN0_Bus_Off_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">CAN0_Bus_Off_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[43]">ADC0_IRQHandler</a> from adc.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[44]">ADC1_IRQHandler</a> from adc.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[28]">CAN0_Bus_Off_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[29]">CAN0_Error_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[27]">CAN0_ORed_Message_buffer_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2b]">CAN0_Rx_Warning_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2a]">CAN0_Tx_Warning_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2c]">CAN0_Wake_Up_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[30]">CAN1_Bus_Off_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[31]">CAN1_Error_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2f]">CAN1_ORed_Message_buffer_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[33]">CAN1_Rx_Warning_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[32]">CAN1_Tx_Warning_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[34]">CAN1_Wake_Up_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[45]">CMP0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[46]">CMP1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[47]">CMP2_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4b]">CMT_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5b]">DAC0_IRQHandler</a> from dac.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5c]">DAC1_IRQHandler</a> from dac.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[a]">DMA0_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[14]">DMA10_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[15]">DMA11_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[16]">DMA12_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[17]">DMA13_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[18]">DMA14_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[19]">DMA15_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[b]">DMA1_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[c]">DMA2_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[d]">DMA3_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[e]">DMA4_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[f]">DMA5_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[10]">DMA6_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[11]">DMA7_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[12]">DMA8_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[13]">DMA9_IRQHandler</a> from dma.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1a]">DMA_Error_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[72]">DefaultISR</a> from startup_mk60d10.o(.text) referenced 136 times from startup_mk60d10.o(RESET)
 <LI><a href="#[55]">ENET_1588_Timer_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[58]">ENET_Error_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[57]">ENET_Receive_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[56]">ENET_Transmit_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1c]">FTFL_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[48]">FTM0_IRQHandler</a> from ftm.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[49]">FTM1_IRQHandler</a> from ftm.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4a]">FTM2_IRQHandler</a> from ftm.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[22]">I2C0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[23]">I2C1_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2e]">I2S0_Rx_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[2d]">I2S0_Tx_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1f]">LLW_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5f]">LPTimer_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1e]">LVD_LVW_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5e]">MCG_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1b]">MCM_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from common.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[94]">OV_ISR</a> from ov7725_init.o(.text) referenced from ov7725_init.o(.text)
 <LI><a href="#[52]">PDB0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4e]">PIT0_IRQHandler</a> from pit.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[af]">PIT1_HandlerU</a> from getready.o(.text) referenced from getready.o(.text)
 <LI><a href="#[4f]">PIT1_IRQHandler</a> from pit.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[50]">PIT2_IRQHandler</a> from pit.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[51]">PIT3_IRQHandler</a> from pit.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[61]">PORTA_IRQHandler</a> from gpio.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[62]">PORTB_IRQHandler</a> from gpio.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[63]">PORTC_IRQHandler</a> from gpio.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[64]">PORTD_IRQHandler</a> from ov7620.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[65]">PORTE_IRQHandler</a> from ov7620.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[74]">QD_value</a> from control.o(.text) referenced from getready.o(.text)
 <LI><a href="#[21]">RNG_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4c]">RTC_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[4d]">RTC_Seconds_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[1d]">Read_Collision_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[60]">Reserved102_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[66]">Reserved108_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[67]">Reserved109_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[69]">Reserved111_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6a]">Reserved112_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6b]">Reserved113_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6c]">Reserved114_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6d]">Reserved115_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6e]">Reserved116_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6f]">Reserved117_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[70]">Reserved118_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[71]">Reserved119_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[35]">Reserved59_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[59]">Reserved95_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5a]">SDHC_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[24]">SPI0_IRQHandler</a> from spi.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[25]">SPI1_IRQHandler</a> from spi.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[26]">SPI2_IRQHandler</a> from spi.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[68]">SWI_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[75]">SystemInit</a> from system_mk60d10.o(.text) referenced from startup_mk60d10.o(.text)
 <LI><a href="#[5d]">TSI0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[38]">UART0_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[36]">UART0_LON_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[37]">UART0_RX_TX_IRQHandler</a> from uart.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3a]">UART1_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[39]">UART1_RX_TX_IRQHandler</a> from uart.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3c]">UART2_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3b]">UART2_RX_TX_IRQHandler</a> from uart.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3e]">UART3_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3d]">UART3_RX_TX_IRQHandler</a> from uart.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[40]">UART4_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[3f]">UART4_RX_TX_IRQHandler</a> from uart.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[42]">UART5_ERR_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[41]">UART5_RX_TX_IRQHandler</a> from uart.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[53]">USB0_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[54]">USBDCD_IRQHandler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mk60d10.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[20]">Watchdog_IRQHandler</a> from wdog.o(.text) referenced from startup_mk60d10.o(RESET)
 <LI><a href="#[76]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mk60d10.o(.text)
 <LI><a href="#[78]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[77]">fputc</a> from uart.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[73]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[100]">ov7620_DMA</a> from ov7620.o(.text) referenced from ov7620.o(.text)
 <LI><a href="#[98]">ov7725_DMA</a> from ov7725_init.o(.text) referenced from ov7725_init.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[76]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[79]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[121]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[12e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[73]"></a>main</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = main &rArr; bamaswitch &rArr; Printf &rArr; LCD_printf &rArr; LCD_DispChar &rArr; _LCD_DispChar &rArr; LCD_Draw_Point &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startimage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prestate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointbizhang
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookfor
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firstimage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findpoint
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endimage
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duqubama
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bamaswitch
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[74]"></a>QD_value</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QD_value
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_QD_GetData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_QD_ClearCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> getready.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>Car_PWM_ChangeDuty</STRONG> (Thumb, 696 bytes, Stack size 16 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
</UL>

<P><STRONG><a name="[8e]"></a>sending3</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, img_processing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sending3 &rArr; UART_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bamaswitch
</UL>

<P><STRONG><a name="[90]"></a>SCCB_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ov7725_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SCCB_Init &rArr; ov7725_set_image_size &rArr; i2c_write_byte &rArr; i2c_send_byte &rArr; get_ack &rArr; GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_set_image_size
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_probe
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Init
</UL>

<P><STRONG><a name="[94]"></a>OV_ISR</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ov7725_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OV_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDestAddress
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableRequest
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725_init.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>ov7725_DMA</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ov7725_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ov7725_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7725_init.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>ov7725_Port_Init</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, ov7725_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ov7725_Port_Init &rArr; GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ITDMAConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CallbackInstall
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableRequest
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CallbackInstall
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Init
</UL>

<P><STRONG><a name="[a2]"></a>ov7725_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ov7725_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ov7725_Init &rArr; SCCB_Init &rArr; ov7725_set_image_size &rArr; i2c_write_byte &rArr; i2c_send_byte &rArr; get_ack &rArr; GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Port_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
</UL>

<P><STRONG><a name="[a4]"></a>ov7725_Get_Imge</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ov7725_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ov7725_Get_Imge
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firstimage
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bamaswitch
</UL>

<P><STRONG><a name="[b5]"></a>img_extract</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ov7725_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = img_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firstimage
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endimage
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bamaswitch
</UL>

<P><STRONG><a name="[af]"></a>PIT1_HandlerU</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, getready.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> getready.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>getready</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, getready.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = getready &rArr; LCD_Init &rArr; SPI_QuickInit &rArr; SPI_Init &rArr; SPI_CTARConfig &rArr; dspi_hal_set_baud
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_QuickInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_QuickInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ITDMAConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_CallbackInstall
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7620_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_QD_QuickInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_QuickInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_PWM_QuickInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_PWM_ChangDuty
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>Printf</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, getready.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Printf &rArr; LCD_printf &rArr; LCD_DispChar &rArr; _LCD_DispChar &rArr; LCD_Draw_Point &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bamaswitch
</UL>

<P><STRONG><a name="[7d]"></a>duqubama</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, getready.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = duqubama
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>bamaswitch</STRONG> (Thumb, 642 bytes, Stack size 16 bytes, getready.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = bamaswitch &rArr; Printf &rArr; LCD_printf &rArr; LCD_DispChar &rArr; _LCD_DispChar &rArr; LCD_Draw_Point &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_extract
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Get_Imge
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sending3
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>firstimage</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, getready.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = firstimage &rArr; img_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_extract
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Get_Imge
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>startimage</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, getready.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = startimage
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>endimage</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, getready.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = endimage &rArr; img_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>stopmove</STRONG> (Thumb, 374 bytes, Stack size 0 bytes, getready.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stopmove &rArr; FTM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass
</UL>

<P><STRONG><a name="[b8]"></a>test</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, getready.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadByte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sending3
</UL>

<P><STRONG><a name="[75]"></a>SystemInit</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, system_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, system_mk60d10.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN0_Bus_Off_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Bus_Off_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Bus_Off_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN0_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN0_Rx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN0_Tx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_Bus_Off_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_Rx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_Tx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_Wake_Up_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ENET_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ENET_Receive_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ENET_Transmit_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FTFL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2S0_Rx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2S0_Tx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LLW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>LPTimer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>Reserved102_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>Reserved108_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>Reserved109_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>Reserved111_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>Reserved112_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>Reserved113_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>Reserved114_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>Reserved116_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>Reserved117_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>Reserved118_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>Reserved119_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>Reserved59_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>Reserved95_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SDHC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART0_LON_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART3_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USBDCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk60d10.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>ADC_IsConversionCompleted</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>ADC_ITDMAConfig</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
</UL>

<P><STRONG><a name="[bc]"></a>ADC_Init</STRONG> (Thumb, 556 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickInit
</UL>

<P><STRONG><a name="[131]"></a>ADC_EnableHardwareTrigger</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>ADC_ChlMuxConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickInit
</UL>

<P><STRONG><a name="[bd]"></a>ADC_QuickInit</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinPullConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChlMuxConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[c2]"></a>ADC_StartConversion</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickReadValue
</UL>

<P><STRONG><a name="[c3]"></a>ADC_ReadValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickReadValue
</UL>

<P><STRONG><a name="[c1]"></a>ADC_QuickReadValue</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadValue
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversion
</UL>

<P><STRONG><a name="[132]"></a>ADC_CallbackInstall</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>ADC0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ADC1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>CMT_PWM_QuickInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CMT_PWM_QuickInit &rArr; CLOCK_GetClockFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
</UL>

<P><STRONG><a name="[aa]"></a>CMT_PWM_ChangDuty</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cmt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Control
</UL>

<P><STRONG><a name="[c4]"></a>CLOCK_GetClockFrequency</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetClockFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_QuickInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_QuickInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_PWM_QuickInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CTARConfig
</UL>

<P><STRONG><a name="[133]"></a>QuickInitEncode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>QuickInitDecode</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>DWT_DelayInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
</UL>

<P><STRONG><a name="[c6]"></a>DWT_DelayUs</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DWT_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_DelayMs
</UL>

<P><STRONG><a name="[c5]"></a>DWT_DelayMs</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DWT_DelayMs &rArr; DWT_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[a6]"></a>DelayInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DelayInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_DelayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
</UL>

<P><STRONG><a name="[a3]"></a>DelayMs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DelayMs &rArr; DWT_DelayMs &rArr; DWT_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_probe
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
</UL>

<P><STRONG><a name="[c8]"></a>DelayUs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DelayUs &rArr; DWT_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_byte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ack
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[135]"></a>DAC_Init</STRONG> (Thumb, 568 bytes, Stack size 0 bytes, dac.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>DAC_GetBufferReadPointer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dac.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>DAC_SetBufferReadPointer</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, dac.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>DAC_SetBufferUpperLimit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, dac.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>DAC_ITDMAConfig</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[139]"></a>DAC_SoftwareStartConversion</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dac.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>DAC_SetWaterMark</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, dac.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>DAC_SetBufferValue</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, dac.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>DAC_CallbackInstall</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dac.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>DAC0_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DAC1_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>DMA_DisableRequest</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7620_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Port_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_DMA
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7620_DMA
</UL>

<P><STRONG><a name="[9f]"></a>DMA_Init</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7620_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Port_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetDMATxMode
</UL>

<P><STRONG><a name="[e6]"></a>DMA_ChlAlloc</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetDMATxMode
</UL>

<P><STRONG><a name="[e7]"></a>DMA_ChlFree</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetDMATxMode
</UL>

<P><STRONG><a name="[ec]"></a>DMA_GetMajorLoopCount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAGetRemainByte
</UL>

<P><STRONG><a name="[ea]"></a>DMA_SetMajorLoopCounter</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMASendByte
</UL>

<P><STRONG><a name="[95]"></a>DMA_EnableRequest</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV_ISR
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_IRQHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMASendByte
</UL>

<P><STRONG><a name="[13d]"></a>DMA_EnableAutoDisableRequest</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>DMA_EnableMajorLink</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>DMA_ITConfig</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7620_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Port_Init
</UL>

<P><STRONG><a name="[a1]"></a>DMA_CallbackInstall</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7620_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Port_Init
</UL>

<P><STRONG><a name="[13f]"></a>DMA_IsMajorLoopComplete</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>DMA_SetDestAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV_ISR
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTE_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>DMA_GetDestAddress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>DMA_SetSourceAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMASendByte
</UL>

<P><STRONG><a name="[141]"></a>DMA_GetSourceAddress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>DMA_CancelTransfer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>DMA0_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DMA1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA2_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA3_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA4_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA5_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA6_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA7_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA8_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA8_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA9_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA9_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA10_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA10_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA11_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA11_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA12_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA12_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA13_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA13_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA14_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA14_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA15_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA15_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>FTM_PWM_InvertPolarity</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, ftm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_PWM_InvertPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetMode
</UL>

<P><STRONG><a name="[a8]"></a>FTM_QD_QuickInit</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, ftm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FTM_QD_QuickInit &rArr; FTM_SetMode &rArr; FTM_DualChlConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinOpenDrainConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FTM_InitBasic
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinPullConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
</UL>

<P><STRONG><a name="[8a]"></a>FTM_QD_GetData</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ftm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QD_value
</UL>

<P><STRONG><a name="[8b]"></a>FTM_QD_ClearCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ftm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QD_value
</UL>

<P><STRONG><a name="[8d]"></a>FTM_PWM_ChangeDuty</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, ftm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FTM_PWM_ChangeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_QuickInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopmove
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_PWM_ChangeDuty
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control
</UL>

<P><STRONG><a name="[ab]"></a>FTM_PWM_QuickInit</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, ftm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FTM_PWM_QuickInit &rArr; FTM_SetMode &rArr; FTM_DualChlConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FTM_InitBasic
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
</UL>

<P><STRONG><a name="[d1]"></a>FTM_IC_QuickInit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ftm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FTM_InitBasic
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
</UL>

<P><STRONG><a name="[143]"></a>FTM_IC_SetTriggerMode</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, ftm.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>FTM_GetChlCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ftm.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>FTM_SetMoudleCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ftm.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>FTM_CallbackInstall</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ftm.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>FTM_ITDMAConfig</STRONG> (Thumb, 370 bytes, Stack size 12 bytes, ftm.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>FTM0_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ftm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FTM1_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ftm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FTM2_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ftm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>PORT_PinMuxConfig</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_PinMuxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_IC_QuickInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_QuickInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_QD_QuickInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_QuickInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_PWM_QuickInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_QuickInit
</UL>

<P><STRONG><a name="[bf]"></a>PORT_PinPullConfig</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_PinPullConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_QD_QuickInit
</UL>

<P><STRONG><a name="[d0]"></a>PORT_PinOpenDrainConfig</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_PinOpenDrainConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_QD_QuickInit
</UL>

<P><STRONG><a name="[148]"></a>PORT_PinPassiveFilterConfig</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>GPIO_PinConfig</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[d2]"></a>GPIO_Init</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinOpenDrainConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinPullConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
</UL>

<P><STRONG><a name="[9b]"></a>GPIO_QuickInit</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7620_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Port_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_byte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ack
</UL>

<P><STRONG><a name="[d6]"></a>GPIO_WriteBit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WakeUp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Sleep
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_BackgroundColor
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_byte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ack
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>

<P><STRONG><a name="[dd]"></a>GPIO_SetBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_byte
</UL>

<P><STRONG><a name="[d9]"></a>GPIO_ResetBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ack
</UL>

<P><STRONG><a name="[b4]"></a>GPIO_ReadBit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duqubama
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_byte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ack
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_ToggleBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>GPIO_ReadPort</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>GPIO_WritePort</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>GPIO_ITDMAConfig</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_ITDMAConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7620_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Port_Init
</UL>

<P><STRONG><a name="[9c]"></a>GPIO_CallbackInstall</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Port_Init
</UL>

<P><STRONG><a name="[61]"></a>PORTA_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>PORTB_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>PORTC_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>i2c_start</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, io2iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c_start &rArr; DelayUs &rArr; DWT_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_byte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
</UL>

<P><STRONG><a name="[d7]"></a>i2c_stop</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, io2iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c_stop &rArr; DelayUs &rArr; DWT_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_byte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
</UL>

<P><STRONG><a name="[d8]"></a>get_ack</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, io2iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_ack &rArr; GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
</UL>

<P><STRONG><a name="[da]"></a>i2c_send_byte</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, io2iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = i2c_send_byte &rArr; get_ack &rArr; GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_byte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
</UL>

<P><STRONG><a name="[db]"></a>i2c_write_byte</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, io2iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = i2c_write_byte &rArr; i2c_send_byte &rArr; get_ack &rArr; GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_set_image_size
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_probe
</UL>

<P><STRONG><a name="[dc]"></a>i2c_read_byte</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, io2iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>

<P><STRONG><a name="[de]"></a>UART_GetTxFIFOSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte
</UL>

<P><STRONG><a name="[8f]"></a>UART_WriteByte</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetTxFIFOSize
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sending3
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bamaswitch
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[77]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; UART_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[b9]"></a>UART_ReadByte</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[df]"></a>fgetc</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadByte
</UL>

<P><STRONG><a name="[e2]"></a>UART_Init</STRONG> (Thumb, 606 bytes, Stack size 12 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_QuickInit
</UL>

<P><STRONG><a name="[14b]"></a>UART_DeInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>UART_SelectDebugInstance</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>UART_EnableTxFIFO</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_QuickInit
</UL>

<P><STRONG><a name="[e4]"></a>UART_EnableRxFIFO</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_QuickInit
</UL>

<P><STRONG><a name="[14d]"></a>UART_GetRxFIFOSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>UART_SetTxFIFOWatermark</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>UART_SetRxFIFOWatermark</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>UART_ITDMAConfig</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetDMATxMode
</UL>

<P><STRONG><a name="[150]"></a>UART_CallbackTxInstall</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>UART_CallbackRxInstall</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>UART_QuickInit</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_QuickInit &rArr; UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableRxFIFO
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableTxFIFO
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
</UL>

<P><STRONG><a name="[37]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_RX_TX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_RX_TX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_RX_TX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART3_RX_TX_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_RX_TX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_RX_TX_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4_RX_TX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART5_RX_TX_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART5_RX_TX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>UART_SetDMATxMode</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChlFree
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChlAlloc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITDMAConfig
</UL>

<P><STRONG><a name="[e8]"></a>UART_DMASendByte</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSourceAddress
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetMajorLoopCounter
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableRequest
</UL>

<P><STRONG><a name="[eb]"></a>UART_DMAGetRemainByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetMajorLoopCount
</UL>

<P><STRONG><a name="[ed]"></a>SPI_CTARConfig</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SPI_CTARConfig &rArr; dspi_hal_set_baud
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dspi_hal_set_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[ef]"></a>SPI_Init</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SPI_Init &rArr; SPI_CTARConfig &rArr; dspi_hal_set_baud
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CTARConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_QuickInit
</UL>

<P><STRONG><a name="[f0]"></a>SPI_QuickInit</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SPI_QuickInit &rArr; SPI_Init &rArr; SPI_CTARConfig &rArr; dspi_hal_set_baud
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[f9]"></a>SPI_EnableTxFIFO</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[152]"></a>SPI_EnableRxFIFO</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>SPI_ITDMAConfig</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>SPI_CallbackInstall</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>SPI_ReadWriteByte</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WakeUp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Sleep
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_BackgroundColor
</UL>

<P><STRONG><a name="[24]"></a>SPI0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SPI2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>WDOG_Init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, wdog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_QuickInit
</UL>

<P><STRONG><a name="[f3]"></a>WDOG_QuickInit</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, wdog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Init
</UL>

<P><STRONG><a name="[f4]"></a>WDOG_ITDMAConfig</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wdog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Unlock
</UL>

<P><STRONG><a name="[155]"></a>WDOG_CallbackInstall</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>WDOG_GetResetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>WDOG_ClearResetCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>WDOG_GetCurrentCounter</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>WDOG_Refresh</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wdog.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>Watchdog_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Watchdog_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>PIT_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT_Init &rArr; CLOCK_GetClockFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_QuickInit
</UL>

<P><STRONG><a name="[ac]"></a>PIT_QuickInit</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PIT_QuickInit &rArr; PIT_Init &rArr; CLOCK_GetClockFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
</UL>

<P><STRONG><a name="[ae]"></a>PIT_ITDMAConfig</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIT_ITDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
</UL>

<P><STRONG><a name="[15a]"></a>PIT_ResetCounter</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pit.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>PIT_GetCounterValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pit.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>PIT_CallbackInstall</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
</UL>

<P><STRONG><a name="[4e]"></a>PIT0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT0_IRQHandler &rArr; PIT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>PIT1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT1_IRQHandler &rArr; PIT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>PIT2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT2_IRQHandler &rArr; PIT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>PIT3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT3_IRQHandler &rArr; PIT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>LCD_Display_BackgroundColor</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, drv_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_Display_BackgroundColor &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[b0]"></a>LCD_Init</STRONG> (Thumb, 1418 bytes, Stack size 8 bytes, drv_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = LCD_Init &rArr; SPI_QuickInit &rArr; SPI_Init &rArr; SPI_CTARConfig &rArr; dspi_hal_set_baud
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_BackgroundColor
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EnableTxFIFO
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_QuickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
</UL>

<P><STRONG><a name="[fa]"></a>LCD_Draw_Point</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, drv_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_Draw_Point &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_DispChar
</UL>

<P><STRONG><a name="[fb]"></a>LCD_Sleep</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[fc]"></a>LCD_WakeUp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[fd]"></a>_LCD_DispChar</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, drv_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _LCD_DispChar &rArr; LCD_Draw_Point &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispChar
</UL>

<P><STRONG><a name="[fe]"></a>LCD_DispChar</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, drv_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = LCD_DispChar &rArr; _LCD_DispChar &rArr; LCD_Draw_Point &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_DispChar
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
</UL>

<P><STRONG><a name="[b3]"></a>LCD_printf</STRONG> (Thumb, 68 bytes, Stack size 104 bytes, drv_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = LCD_printf &rArr; LCD_DispChar &rArr; _LCD_DispChar &rArr; LCD_Draw_Point &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispChar
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>

<P><STRONG><a name="[100]"></a>ov7620_DMA</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ov7620.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ov7620_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ov7620.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>OV7620_Init</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, ov7620.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OV7620_Init &rArr; GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ITDMAConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableRequest
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CallbackInstall
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getready
</UL>

<P><STRONG><a name="[65]"></a>PORTE_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ov7620.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDestAddress
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>PORTD_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ov7620.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableRequest
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk60d10.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>ov7725_probe</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ov7725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ov7725_probe &rArr; i2c_write_byte &rArr; i2c_send_byte &rArr; get_ack &rArr; GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
</UL>

<P><STRONG><a name="[92]"></a>ov7725_set_image_size</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, ov7725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ov7725_set_image_size &rArr; i2c_write_byte &rArr; i2c_send_byte &rArr; get_ack &rArr; GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_byte
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
</UL>

<P><STRONG><a name="[80]"></a>findpoint</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = findpoint &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>findbarrier</STRONG> (Thumb, 892 bytes, Stack size 28 bytes, flag.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>move</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, move.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = move &rArr; Motor_Control &rArr; FTM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Control
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>lookfor</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, response.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>bizhang</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, response.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>piancha</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, response.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = piancha &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere
</UL>

<P><STRONG><a name="[82]"></a>gothere</STRONG> (Thumb, 824 bytes, Stack size 48 bytes, response.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gothere &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piancha
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>gothere1</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, response.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gothere1 &rArr; piancha &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piancha
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>pointbizhang</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, response.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>Servo_Control</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Servo_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMT_PWM_ChangDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
</UL>

<P><STRONG><a name="[108]"></a>Motor_Control</STRONG> (Thumb, 1086 bytes, Stack size 40 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Motor_Control &rArr; FTM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
</UL>

<P><STRONG><a name="[15e]"></a>julican</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, qita.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>speedset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, qita.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>pass</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, qita.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pass &rArr; stopmove &rArr; FTM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopmove
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>jiajiansujuli</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, qita.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>prestate</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, qita.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Port_Init
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findpoint
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piancha
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findpoint
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piancha
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findpoint
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piancha
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findpoint
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findpoint
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piancha
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gothere
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[165]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[166]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[114]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[11a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[119]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[168]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[169]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16c]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[93]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_set_image_size
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_probe
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
</UL>

<P><STRONG><a name="[16d]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[16e]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[124]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16f]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[170]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[171]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[ff]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_printf
</UL>

<P><STRONG><a name="[172]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[173]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[174]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a5]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ov7725_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Get_Imge
</UL>

<P><STRONG><a name="[97]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ov7725_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_Port_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV_ISR
</UL>

<P><STRONG><a name="[b6]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, getready.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startimage
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firstimage
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endimage
</UL>

<P><STRONG><a name="[ba]"></a>ADC_Calibration</STRONG> (Thumb, 324 bytes, Stack size 20 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[ca]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dac.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_ITDMAConfig
</UL>

<P><STRONG><a name="[cf]"></a>_FTM_InitBasic</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ftm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _FTM_InitBasic
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_IC_QuickInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_QD_QuickInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_QuickInit
</UL>

<P><STRONG><a name="[cc]"></a>get_channel_pair_index</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ftm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DualChlConfig
</UL>

<P><STRONG><a name="[cb]"></a>FTM_DualChlConfig</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ftm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FTM_DualChlConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_channel_pair_index
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetMode
</UL>

<P><STRONG><a name="[cd]"></a>FTM_SetMode</STRONG> (Thumb, 1138 bytes, Stack size 16 bytes, ftm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FTM_SetMode &rArr; FTM_DualChlConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_InvertPolarity
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DualChlConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_IC_QuickInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_QD_QuickInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_QuickInit
</UL>

<P><STRONG><a name="[d4]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ITDMAConfig
</UL>

<P><STRONG><a name="[e1]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITDMAConfig
</UL>

<P><STRONG><a name="[ee]"></a>dspi_hal_set_baud</STRONG> (Thumb, 226 bytes, Stack size 60 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dspi_hal_set_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CTARConfig
</UL>

<P><STRONG><a name="[f2]"></a>WDOG_Unlock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wdog.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_ITDMAConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Init
</UL>

<P><STRONG><a name="[f6]"></a>PIT_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT3_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT2_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT1_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT0_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ov7620.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7620_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTE_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[123]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[127]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[126]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[78]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
